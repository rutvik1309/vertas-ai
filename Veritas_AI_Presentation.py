#!/usr/bin/env python3
"""
PowerPoint Presentation Generator for Veritas AI Project
"""

from pptx import Presentation
from pptx.util import Inches, Pt
from pptx.enum.text import PP_ALIGN
from pptx.dml.color import RGBColor
import os

def create_veritas_ai_presentation():
    """Create a comprehensive PowerPoint presentation for Veritas AI"""
    
    # Create presentation
    prs = Presentation()
    
    # Define colors
    primary_color = RGBColor(0, 123, 255)  # Blue
    accent_color = RGBColor(255, 193, 7)   # Yellow
    dark_color = RGBColor(52, 58, 64)      # Dark gray
    success_color = RGBColor(40, 167, 69)  # Green
    warning_color = RGBColor(255, 193, 7)  # Yellow
    danger_color = RGBColor(220, 53, 69)   # Red
    
    # Slide 1: Title Slide
    slide_layout = prs.slide_layouts[0]  # Title slide
    slide = prs.slides.add_slide(slide_layout)
    
    title = slide.shapes.title
    subtitle = slide.placeholders[1]
    
    title.text = "VERITAS AI"
    subtitle.text = "News Fact Checker\nAI-Powered Misinformation Detection System"
    
    # Style title
    title.text_frame.paragraphs[0].font.size = Pt(44)
    title.text_frame.paragraphs[0].font.color.rgb = primary_color
    title.text_frame.paragraphs[0].font.bold = True
    
    # Style subtitle
    subtitle.text_frame.paragraphs[0].font.size = Pt(20)
    subtitle.text_frame.paragraphs[0].font.color.rgb = dark_color
    
    # Slide 2: Agenda
    slide_layout = prs.slide_layouts[1]  # Title and content
    slide = prs.slides.add_slide(slide_layout)
    
    title = slide.shapes.title
    content = slide.placeholders[1]
    
    title.text = "Presentation Agenda"
    title.text_frame.paragraphs[0].font.color.rgb = primary_color
    
    content_text = """‚Ä¢ Project Objective
‚Ä¢ Scope Definition
‚Ä¢ Target Audience
‚Ä¢ Business Case
‚Ä¢ Technologies Used
‚Ä¢ Challenges & Solutions
‚Ä¢ System Thresholds
‚Ä¢ Key Achievements"""
    
    content.text = content_text
    
    # Slide 3: Objective
    slide_layout = prs.slide_layouts[1]
    slide = prs.slides.add_slide(slide_layout)
    
    title = slide.shapes.title
    content = slide.placeholders[1]
    
    title.text = "Project Objective"
    title.text_frame.paragraphs[0].font.color.rgb = primary_color
    
    content_text = """üéØ Primary Goal:
Develop an AI-powered news fact-checking system that automatically analyzes and verifies the authenticity of news articles, videos, and multimedia content using machine learning and natural language processing.

Key Objectives:
‚Ä¢ Automated Fact-Checking: Real-time analysis of news content
‚Ä¢ Multi-Format Support: Text, YouTube videos, images, audio, documents
‚Ä¢ Credibility Assessment: Evaluate source reliability and content quality
‚Ä¢ User-Friendly Interface: Chrome extension for seamless integration
‚Ä¢ Scalable Architecture: Handle multiple users with API key rotation"""
    
    content.text = content_text
    
    # Slide 4: In Scope
    slide_layout = prs.slide_layouts[1]
    slide = prs.slides.add_slide(slide_layout)
    
    title = slide.shapes.title
    content = slide.placeholders[1]
    
    title.text = "In Scope"
    title.text_frame.paragraphs[0].font.color.rgb = success_color
    
    content_text = """‚úÖ Core Features:
‚Ä¢ News Classification: ML model with confidence scores
‚Ä¢ Multi-Media Analysis: Text, images, audio, video, documents
‚Ä¢ YouTube Integration: Specialized analysis with transcript extraction
‚Ä¢ Source Credibility: Reputable source detection
‚Ä¢ API Key Management: Automatic rotation across 8 keys
‚Ä¢ Chrome Extension: Browser-based interface
‚Ä¢ Web Application: Full-featured with authentication
‚Ä¢ Conversation Memory: Learning from interactions
‚Ä¢ Performance Monitoring: Real-time tracking

‚úÖ Technical Components:
‚Ä¢ Backend: Flask web application with RESTful APIs
‚Ä¢ Frontend: Chrome extension with modern UI
‚Ä¢ Database: SQLite with user management
‚Ä¢ ML Pipeline: Scikit-learn models
‚Ä¢ AI Integration: Google Gemini API
‚Ä¢ Deployment: Docker containerization"""
    
    content.text = content_text
    
    # Slide 5: Out of Scope
    slide_layout = prs.slide_layouts[1]
    slide = prs.slides.add_slide(slide_layout)
    
    title = slide.shapes.title
    content = slide.placeholders[1]
    
    title.text = "Out of Scope"
    title.text_frame.paragraphs[0].font.color.rgb = danger_color
    
    content_text = """‚ùå Not Included:
‚Ä¢ Real-time Video Streaming Analysis
‚Ä¢ Social Media Integration
‚Ä¢ Multi-language Support (English only)
‚Ä¢ Mobile Application
‚Ä¢ Advanced Video Processing
‚Ä¢ Real-time News Monitoring
‚Ä¢ Legal Compliance
‚Ä¢ Advanced NLP"""
    
    content.text = content_text
    
    # Slide 6: Target Audience
    slide_layout = prs.slide_layouts[1]
    slide = prs.slides.add_slide(slide_layout)
    
    title = slide.shapes.title
    content = slide.placeholders[1]
    
    title.text = "Target Audience"
    title.text_frame.paragraphs[0].font.color.rgb = primary_color
    
    content_text = """üë• Primary Users:
‚Ä¢ General Public: Individuals seeking to verify news authenticity
‚Ä¢ Students: Academic research and fact-checking
‚Ä¢ Journalists: Quick verification of sources and claims
‚Ä¢ Researchers: Academic fact-checking and validation
‚Ä¢ Content Creators: Verification before sharing

üë• Secondary Users:
‚Ä¢ Educational Institutions: Teaching media literacy
‚Ä¢ News Organizations: Internal fact-checking tools
‚Ä¢ Government Agencies: Public information verification
‚Ä¢ Business Professionals: Corporate communication verification"""
    
    content.text = content_text
    
    # Slide 7: Business Case
    slide_layout = prs.slide_layouts[1]
    slide = prs.slides.add_slide(slide_layout)
    
    title = slide.shapes.title
    content = slide.placeholders[1]
    
    title.text = "Business Case"
    title.text_frame.paragraphs[0].font.color.rgb = primary_color
    
    content_text = """üìä Market Need:
‚Ä¢ Misinformation Crisis: 64% of adults encounter fake news regularly
‚Ä¢ Digital Literacy Gap: Need for accessible fact-checking tools
‚Ä¢ Information Overload: Users struggle to verify content authenticity
‚Ä¢ Media Literacy: Growing demand for critical thinking tools

üí∞ Value Proposition:
‚Ä¢ Accessibility: Easy-to-use Chrome extension
‚Ä¢ Accuracy: ML + AI hybrid approach
‚Ä¢ Comprehensive: Multi-format support
‚Ä¢ Scalable: API rotation system
‚Ä¢ Educational: Develops critical thinking skills

üíº Revenue Potential:
‚Ä¢ Freemium Model: Basic free, premium for advanced features
‚Ä¢ API Services: B2B fact-checking API
‚Ä¢ Educational Licensing: School partnerships
‚Ä¢ Enterprise Solutions: Custom deployments"""
    
    content.text = content_text
    
    # Slide 8: Technologies Used
    slide_layout = prs.slide_layouts[1]
    slide = prs.slides.add_slide(slide_layout)
    
    title = slide.shapes.title
    content = slide.placeholders[1]
    
    title.text = "Technologies Used"
    title.text_frame.paragraphs[0].font.color.rgb = primary_color
    
    content_text = """üîß Backend Technologies:
‚Ä¢ Python 3.11, Flask 3.1.0, SQLAlchemy
‚Ä¢ Flask-Login, Flask-CORS

ü§ñ Machine Learning & AI:
‚Ä¢ Scikit-learn 1.7.1, Google Gemini API
‚Ä¢ NLTK 3.8.1, Joblib 1.4.2, NumPy 1.24.4

üìä Data Processing:
‚Ä¢ Newspaper3k, BeautifulSoup4, Pillow 11.0.0
‚Ä¢ PyPDF2, python-docx

üé• Media Processing:
‚Ä¢ yt-dlp, youtube-transcript-api
‚Ä¢ SpeechRecognition, pytesseract, moviepy

üåê Frontend & Extension:
‚Ä¢ Chrome Extension API, JavaScript ES6
‚Ä¢ HTML5/CSS3, Chrome Storage API

üöÄ Deployment & Infrastructure:
‚Ä¢ Docker, Gunicorn, Nginx
‚Ä¢ ChromaDB, Redis"""
    
    content.text = content_text
    
    # Slide 9: Challenges & Solutions (Part 1)
    slide_layout = prs.slide_layouts[1]
    slide = prs.slides.add_slide(slide_layout)
    
    title = slide.shapes.title
    content = slide.placeholders[1]
    
    title.text = "Challenges & Solutions (Part 1)"
    title.text_frame.paragraphs[0].font.color.rgb = warning_color
    
    content_text = """üî¥ Challenge 1: API Rate Limiting
Problem: Google Gemini API free tier limited to 50 requests/day
Solution: 
‚Ä¢ Automatic API key rotation across 8 keys
‚Ä¢ Performance tracking system
‚Ä¢ Intelligent load balancing
Result: 400 requests/day capacity

üî¥ Challenge 2: YouTube Content Analysis
Problem: ML model incorrectly classified reputable videos as "Fake"
Solution:
‚Ä¢ Hybrid analysis system for YouTube content
‚Ä¢ Reputable source detection (CBC, BBC, Reuters)
‚Ä¢ Natural language processing for metadata
‚Ä¢ Sensationalist content detection
Result: Accurate classification of reputable vs. fake content

üî¥ Challenge 3: Model Compatibility
Problem: Scikit-learn version conflicts
Solution:
‚Ä¢ Model version compatibility scripts
‚Ä¢ Fallback mechanisms
‚Ä¢ Comprehensive error handling
Result: Stable model loading across environments"""
    
    content.text = content_text
    
    # Slide 10: Challenges & Solutions (Part 2)
    slide_layout = prs.slide_layouts[1]
    slide = prs.slides.add_slide(slide_layout)
    
    title = slide.shapes.title
    content = slide.placeholders[1]
    
    title.text = "Challenges & Solutions (Part 2)"
    title.text_frame.paragraphs[0].font.color.rgb = warning_color
    
    content_text = """üî¥ Challenge 4: Extension-Backend Communication
Problem: Chrome extension connection errors
Solution:
‚Ä¢ Fixed CORS configuration
‚Ä¢ Proper conversation state management
‚Ä¢ Error handling for file uploads
Result: Seamless extension-backend communication

üî¥ Challenge 5: Multi-Format Processing
Problem: Supporting various file formats
Solution:
‚Ä¢ Multiple processing libraries integration
‚Ä¢ OCR for image text extraction
‚Ä¢ Audio-to-text conversion
Result: Comprehensive multi-format support

üî¥ Challenge 6: Scalability
Problem: Single API key bottleneck
Solution:
‚Ä¢ Automatic API key rotation system
‚Ä¢ Performance monitoring and tracking
‚Ä¢ Caching mechanisms
Result: Production-ready scalable architecture"""
    
    content.text = content_text
    
    # Slide 11: System Thresholds
    slide_layout = prs.slide_layouts[1]
    slide = prs.slides.add_slide(slide_layout)
    
    title = slide.shapes.title
    content = slide.placeholders[1]
    
    title.text = "System Thresholds"
    title.text_frame.paragraphs[0].font.color.rgb = primary_color
    
    content_text = """üìä Performance Thresholds:
‚Ä¢ Response Time: < 30 seconds for complex analysis
‚Ä¢ Accuracy: > 85% for reputable source detection
‚Ä¢ API Success Rate: > 90% for key rotation system
‚Ä¢ Uptime: > 99% for production deployment
‚Ä¢ Concurrent Users: Support for 100+ simultaneous users

üìä Technical Thresholds:
‚Ä¢ File Size Limits: Images (10MB), Videos (100MB), Documents (50MB)
‚Ä¢ Text Length: 10,000 characters max per analysis
‚Ä¢ API Requests: 60 requests/minute per key
‚Ä¢ Daily Capacity: 400 requests/day (8 keys √ó 50 requests)

üìä Quality Thresholds:
‚Ä¢ Confidence Score: > 70% for reliable predictions
‚Ä¢ Source Verification: 100% for known reputable sources
‚Ä¢ Error Recovery: Automatic fallback for failed API calls
‚Ä¢ Data Privacy: No personal data storage in analysis

üìä User Experience Thresholds:
‚Ä¢ Extension Load Time: < 3 seconds
‚Ä¢ Analysis Completion: < 30 seconds for most content
‚Ä¢ UI Responsiveness: < 1 second for user interactions
‚Ä¢ Error Handling: Graceful degradation with helpful messages"""
    
    content.text = content_text
    
    # Slide 12: Key Achievements
    slide_layout = prs.slide_layouts[1]
    slide = prs.slides.add_slide(slide_layout)
    
    title = slide.shapes.title
    content = slide.placeholders[1]
    
    title.text = "Key Achievements"
    title.text_frame.paragraphs[0].font.color.rgb = success_color
    
    content_text = """üèÜ Major Accomplishments:

‚úÖ Multi-Format Support
‚Ä¢ Text, images, audio, video, documents
‚Ä¢ Comprehensive content analysis capabilities

‚úÖ Hybrid AI/ML System
‚Ä¢ Combines ML classification with AI reasoning
‚Ä¢ Enhanced accuracy and reliability

‚úÖ Scalable Architecture
‚Ä¢ API rotation for high-volume usage
‚Ä¢ Production-ready infrastructure

‚úÖ User-Friendly Interface
‚Ä¢ Chrome extension for easy access
‚Ä¢ Intuitive web application

‚úÖ Educational Value
‚Ä¢ Helps develop critical thinking skills
‚Ä¢ Promotes media literacy

‚úÖ Comprehensive Analysis
‚Ä¢ Source credibility assessment
‚Ä¢ Content quality evaluation
‚Ä¢ Real-time fact-checking capabilities

üéØ Result: A sophisticated, production-ready fact-checking system with innovative solutions to real-world challenges in the fight against misinformation."""
    
    content.text = content_text
    
    # Slide 13: Thank You
    slide_layout = prs.slide_layouts[0]  # Title slide
    slide = prs.slides.add_slide(slide_layout)
    
    title = slide.shapes.title
    subtitle = slide.placeholders[1]
    
    title.text = "Thank You!"
    subtitle.text = "Questions & Discussion\n\nVeritas AI - Fighting Misinformation with AI"
    
    # Style title
    title.text_frame.paragraphs[0].font.size = Pt(44)
    title.text_frame.paragraphs[0].font.color.rgb = success_color
    title.text_frame.paragraphs[0].font.bold = True
    
    # Style subtitle
    subtitle.text_frame.paragraphs[0].font.size = Pt(20)
    subtitle.text_frame.paragraphs[0].font.color.rgb = dark_color
    
    # Save the presentation
    filename = "Veritas_AI_Presentation.pptx"
    prs.save(filename)
    print(f"‚úÖ Presentation created successfully: {filename}")
    print(f"üìÅ File saved in: {os.getcwd()}")
    
    return filename

if __name__ == "__main__":
    try:
        # Install required package if not available
        import subprocess
        import sys
        
        try:
            from pptx import Presentation
        except ImportError:
            print("Installing python-pptx...")
            subprocess.check_call([sys.executable, "-m", "pip", "install", "python-pptx"])
            from pptx import Presentation
        
        filename = create_veritas_ai_presentation()
        print(f"\nüéâ Your Veritas AI presentation is ready!")
        print(f"üìä Total slides: 13")
        print(f"üìã Content includes: Objective, Scope, Audience, Business Case, Technologies, Challenges, Solutions, Thresholds, and Achievements")
        
    except Exception as e:
        print(f"‚ùå Error creating presentation: {e}")
        print("üí° Make sure you have write permissions in the current directory") 